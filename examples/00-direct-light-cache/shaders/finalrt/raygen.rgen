#version 460
#extension GL_GOOGLE_include_directive : enable // Include files
#extension GL_EXT_ray_tracing : enable // Raytracing

#include "bindpoints.glsl"
#include "common/camera.glsl" // Binds camera matrices UBO
#include "rt_common/imageoutput.glsl" // Binds the output storage image
#include "irradiancecache/irradiancecache.glsl"
#include "common/xteanoise.glsl"
#include "shading/constants.glsl"
#include "probemat/probemat.glsl"

void main()
{
	// We calculate the ray vector using the current pixels UV coords and the inverse view and projection matrices
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5); // offset from the corner of the pixel to the center
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy); // UV coordinate of the current pixel in the framebuffer texture
	vec2 d = inUV * 2.0 - 1.0; // Correct for depth information

	vec4 origin = Camera.InverseViewMatrix * vec4(0,0,0,1); // Ray origin in world space
	vec4 direction = Camera.InverseViewMatrix * Camera.InverseProjectionMatrix * vec4(d.x, d.y, 1, 1); // Target direction in world space


	ProbeMatTraceConfig probeMatConfig;
	if (irradianceCacheMode() == MODE_INDIRECT_ILLUMINATION) {
		probeMatConfig.sampleIrradianceCache = true;
		probeMatConfig.traceDirectLight = true;
	} else if (irradianceCacheMode() == MODE_DIRECT_ILLUMINATION) {
		probeMatConfig.sampleIrradianceCache = true;
		probeMatConfig.traceDirectLight = false;
	} else if (irradianceCacheMode() == MODE_DEBUG_PATTERN) {
		probeMatConfig.sampleIrradianceCache = true;
		probeMatConfig.traceDirectLight = false;
	} else {
		// not implemented! -> specific recognizable color
		probeMatConfig.sampleIrradianceCache = true;
		probeMatConfig.traceDirectLight = false;
	}

	uint seed = CalculateSeedXTEA(ivec2(gl_LaunchIDEXT.xy), TracerConfig.RngSeed);
	vec3 radiance = performProbeMat(origin.xyz, 0.001, direction.xyz, INFINITY, probeMatConfig, seed);
	imageStore(ImageOutput, ivec2(gl_LaunchIDEXT.xy), vec4(radiance, 1.0));
}
