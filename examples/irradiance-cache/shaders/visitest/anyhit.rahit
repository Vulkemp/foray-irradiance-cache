#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "bindpoints.glsl"
#include "rt_common/tlas.glsl"
#include "common/materialbuffer.glsl"
#include "rt_common/geometrymetabuffer.glsl"
#include "rt_common/geobuffers.glsl"
#include "common/normaltbn.glsl"

#define VISIPAYLOAD_IN
#include "payload.glsl"

hitAttributeEXT vec2 attribs;// Barycentric coordinates

void main()
{
	// get geometry meta and material
	GeometryMeta geometa = GetGeometryMeta(uint(gl_InstanceCustomIndexEXT), uint(gl_GeometryIndexEXT));
	MaterialBufferObject material = GetMaterialOrFallback(geometa.MaterialIndex);

	// test full transparency / opqaueness
	if (material.TransmissionFactor > 0.f)
	{
		ignoreIntersectionEXT;
	}
	if ((material.Flags & MATERIALFLAGBIT_FULLYOPAQUE) > 0 && material.TransmissionTextureIndex < 0)
	{
		return;
	}

	// get geometry
	const vec3 barycentricCoords = vec3(1.0f - attribs.x - attribs.y, attribs.x, attribs.y);
	const uvec3 indices = GetIndices(geometa, uint(gl_PrimitiveID));
	Vertex v0, v1, v2;
	GetVertices(indices, v0, v1, v2);
	const vec2 uv = v0.Uv * barycentricCoords.x + v1.Uv * barycentricCoords.y + v2.Uv * barycentricCoords.z;

	// test alpha opacity via material and texture
	if (!ProbeAlphaOpacity(material, uv))
	{
		ignoreIntersectionEXT;
	}

	if (material.TransmissionTextureIndex >= 0){
		float transmissionFactor = SampleTexture(material.TransmissionTextureIndex, uv).r;
		if (transmissionFactor > 0)
		{
			ignoreIntersectionEXT;
		}
	}
}