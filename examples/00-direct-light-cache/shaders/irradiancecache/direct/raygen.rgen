#version 460
#extension GL_GOOGLE_include_directive : enable // Include files
#extension GL_EXT_ray_tracing : enable // Raytracing

#include "rt_common/bindpoints.glsl"// Defines constants for the bind indices that RaytracingStage uses
#include "common/camera.glsl"// Binds camera matrices UBO
#include "rt_common/tlas.glsl"// Binds Top Level Acceleration Structure
#include "common/xteanoise.glsl"
#include "common/lcrng.glsl"
#include "shading/constants.glsl"
#include "config.glsl"

#include "visitest/visitest.glsl"
const VisiTestConfig visiTestConfig = { 0, 0, 0 };

#define BIND_SIMPLIFIEDLIGHTARRAY 11
#include "directlight.glsl"

#define BIND_IN_IRRADIANCE_CACHE 12
#include "irradiancecache/bindin.glsl"
#define BIND_OUT_IRRADIANCE_CACHE BIND_OUT_IMAGE
#include "irradiancecache/bindout.glsl"

void main()
{
	const uvec3 irrTexel = gl_LaunchIDEXT.xyz;
	const vec3 origin = transformIrradiancePixelToWorld(irrTexel);
	uint seed = CalculateSeedXTEA(irrTexel, TracerConfig.RngSeed);

	vec3 irradiance;
	if (irradianceCacheMode() == MODE_INDIRECT_ILLUMINATION) {
		irradiance = vec3(0);
		if (!irradianceCacheClearCache()) {
			irradiance += readIrradianceCache(irrTexel).xyz;
		}
		irradiance += CollectDirectLight(visiTestConfig, origin, seed);
	} else if (irradianceCacheMode() == MODE_DIRECT_ILLUMINATION) {
		irradiance = CollectDirectLight(visiTestConfig, origin, seed);
	} else if (irradianceCacheMode() == MODE_DEBUG_PATTERN) {
		// no irradiance in tempImage
		irradiance = vec3(0);
	} else {
		// not implemented! -> specific recognizable color
		irradiance = vec3(1, 0.5, 1);
	}
	writeIrradianceCache(irrTexel, vec4(irradiance, 0.0));
}
