#version 460
#extension GL_GOOGLE_include_directive : enable // Include files
#extension GL_EXT_ray_tracing : enable // Raytracing
#extension GL_EXT_nonuniform_qualifier : enable

#include "bindpoints.glsl"
#include "common/camera.glsl"
#include "common/xteanoise.glsl"
#include "shading/constants.glsl"
#include "shading/sampling.glsl"
#include "directlight.glsl"
#include "irradiancecache/bindin.glsl"
#include "irradiancecache/bindout.glsl"
#include "probemat/probemat.glsl"
#include "visitest/visitest.glsl"

vec3 traceForNeighbours(uvec3 irrTexel, inout uint seed)
{
	vec3 origin = transformIrradiancePixelToWorld(irrTexel);
	vec3 prev = vec3(0);
	if (!irradianceCacheClearCache()) {
		prev = readOutIrradianceCache(irrTexel).xyz;
	}

	uint tracesPerFrame = irradianceCacheIndirectTracesPerFrame();
	vec3 probeMat = vec3(0);
	for (uint i = 0; i < tracesPerFrame; i++) {
		vec3 dir = sampleHemiSphere(seed);
		// have a hemisphere + a 50% chance to flip it = full sphere
		if (lcgFloat(seed) < 0.5) {
			dir = -dir;
		}

		ProbeMatTraceConfig config;
		config.sampleIrradianceCache = true;
		config.traceDirectLight = false;
		config.traceIndirectLightDepth = 0;
		config.perfectlyReflectiveDepth = 0;
		probeMat += performProbeMat(origin, 0.001, dir, INFINITY, config, seed);
	}
	probeMat /= tracesPerFrame;

	// this is a giant hack: once one NaN is written other probes will read and further
	// propagate it forever resulting in a black image that only a clear can fix
	// the source of NaNs has not yet been investigated
	if (isnan(probeMat.x) || isnan(probeMat.y) || isnan(probeMat.z)) {
		return prev;
	}
	return mix(prev, probeMat, irradianceCacheIndirectAccumulationFactor());
}

void main()
{
	const uvec3 irrTexel = gl_LaunchIDEXT.xyz;
	uint seed = CalculateSeedXTEA(irrTexel, TracerConfig.RngSeed);

	vec3 irradiance;
	uint mode = irradianceCacheMode();
	if (mode == MODE_INDIRECT_TRACE_DIRECT_TRACE || mode == MODE_DIRECT_TRACE) {
		// ic unused
		irradiance = vec3(0);
	} else if (mode == MODE_INDIRECT_IC_DIRECT_TRACE || mode == MODE_INDIRECT_IC) {
		irradiance = traceForNeighbours(irrTexel, seed);
	} else if (mode == MODE_DIRECT_IC) {
		irradiance = readIrradianceCache(irrTexel).xyz;
	} else if (mode == MODE_DEBUG_PATTERN) {
		const uint levels = 10;
		irradiance = vec3(float((irrTexel.x + irrTexel.y + irrTexel.z) % levels) / levels);
	} else {
		// not implemented! -> specific recognizable color
		irradiance = vec3(1, 0.5, 0/0);
	}
	writeIrradianceCache(irrTexel, vec4(irradiance, 0.0));
}
